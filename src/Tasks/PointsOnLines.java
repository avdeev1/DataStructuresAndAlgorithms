/**
 * ะ ะฟะตัะฒะพะน ัััะพะบะต ะทะฐะดะฐะฝะพ ะดะฒะฐ ัะตะปัั ัะธัะปะฐ
 * 1 โค ๐ โค 50000 ะธ 1โค๐โค50000 โ ะบะพะปะธัะตััะฒะพ ะพััะตะทะบะพะฒ ะธ ัะพัะตะบ ะฝะฐ ะฟััะผะพะน, ัะพะพัะฒะตัััะฒะตะฝะฝะพ.
 * ะกะปะตะดัััะธะต ๐ ัััะพะบ ัะพะดะตัะถะฐั ะฟะพ ะดะฒะฐ ัะตะปัั ัะธัะปะฐ ๐๐ ะธ ๐๐ (๐๐ โค ๐๐)
 * โ ะบะพะพัะดะธะฝะฐัั ะบะพะฝัะพะฒ ะพััะตะทะบะพะฒ.
 * ะะพัะปะตะดะฝัั ัััะพะบะฐ ัะพะดะตัะถะธั ๐ ัะตะปัั ัะธัะตะป โ ะบะพะพัะดะธะฝะฐัั ัะพัะตะบ.
 * ะัะต ะบะพะพัะดะธะฝะฐัั ะฝะต ะฟัะตะฒััะฐัั 108 ะฟะพ ะผะพะดัะปั.
 * ะขะพัะบะฐ ััะธัะฐะตััั ะฟัะธะฝะฐะดะปะตะถะฐัะตะน ะพััะตะทะบั, ะตัะปะธ ะพะฝะฐ ะฝะฐัะพะดะธััั ะฒะฝัััะธ ะฝะตะณะพ ะธะปะธ ะฝะฐ ะณัะฐะฝะธัะต.
 * ะะปั ะบะฐะถะดะพะน ัะพัะบะธ ะฒ ะฟะพััะดะบะต ะฟะพัะฒะปะตะฝะธั ะฒะพ ะฒะฒะพะดะต ะฒัะฒะตะดะธัะต, ัะบะพะปัะบะธะผ ะพััะตะทะบะฐะผ ะพะฝะฐ ะฟัะธะฝะฐะดะปะตะถะธั.
 */


package Tasks;

import java.util.*;

public class PointsOnLines {
    public static void main(String[] args) {
        new PointsOnLines().run();
    }

    private void run() {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();

        int[] points = new int[M];
        int[] starts = new int[N];
        int[] ends = new int[N];

        for (int i = 0; i < N; i++) {
            starts[i] = scanner.nextInt();
            ends[i] = scanner.nextInt();
        }


        Arrays.sort(starts);
        Arrays.sort(ends);

        for (int i = 0; i < M; i++) {
            points[i] = scanner.nextInt();
        }

        int[] counts = new int[M];

        int[] c1 = new int[M];
        int[] c2 = new int[M];

        for (int i = 0; i < M; i++) {
            c1[i] = partition(starts, points[i]);
            c2[i] = partition2(ends, points[i]);
            counts[i] = c1[i] - c2[i];
        }

        for (int i = 0; i < M; i++) {
            System.out.print(counts[i] + " ");
        }
    }

    private int partition(int[] arr, int point) {
        int j = 0;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] <= point)
                j++;
            else break;
        }
        return j;
    }

    private int partition2(int[] arr, int point) {
        int j = 0;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] < point)
                j++;
            else break;
        }
        return j;
    }
}
