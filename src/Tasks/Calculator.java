/**
 * –£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä,
 * –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤—Å–µ–≥–æ —Ç—Ä–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç–µ–∫—É—â–∏–º —á–∏—Å–ª–æ–º ùë•:
 * –∑–∞–º–µ–Ω–∏—Ç—å ùë• –Ω–∞ 2ùë•, 3ùë• –∏–ª–∏ ùë•+1.
 * –ü–æ –¥–∞–Ω–Ω–æ–º—É —Ü–µ–ª–æ–º—É —á–∏—Å–ª—É 1 ‚â§ ùëõ ‚â§ 100000 –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–π ùëò,
 * –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ùëõ –∏–∑ 1.
 * –í—ã–≤–µ–¥–∏—Ç–µ ùëò –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —á–∏—Å–µ–ª.
 */


package Tasks;

import java.util.Scanner;

public class Calculator {
    public static void main(String[] args) {
        new Calculator().run();
    }

    private void run() {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();

        int[] a = new int[N+1];
        a[1]= 0;

        int min;
        for(int i=2; i<N+1; i++){
            min=a[i-1]+1;
            if(i%2==0) min=Math.min(min,a[i/2]+1);
            if(i%3==0) min=Math.min(min,a[i/3]+1);

            a[i] = min;
        }

        StringBuilder ret = new StringBuilder();

        int i=N;
        while(i>1){
            if(a[i]==a[i-1]+1){
                ret.insert(0, 1);
                i--;
                continue;
            }

            if(i%2==0&&a[i]==a[i/2]+1){
                ret.insert(0, 2);
                i/=2;
                continue;
            }

            ret.insert(0, 3);
            i/=3;
        }


        System.out.println(a[N]);

        int res = 1;
        System.out.print(res + " ");
        for (int j = 0; j < ret.length(); j++) {
            switch (ret.toString().charAt(j)) {
                case '1':
                    res++;
                    break;

                case '2':
                    res *= 2;
                    break;

                case '3':
                    res *= 3;
                    break;
            }
            System.out.print(res + " ");
        }
        System.out.println();
    }
}

