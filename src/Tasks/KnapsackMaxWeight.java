/**
 * –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—Ö–æ–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
 * 1 ‚â§ ùëä ‚â§ 10000 –∏ 1 ‚â§ ùëõ ‚â§ 300 ‚Äî –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ä—é–∫–∑–∞–∫–∞ –∏ —á–∏—Å–ª–æ –∑–æ–ª–æ—Ç—ã—Ö —Å–ª–∏—Ç–∫–æ–≤.
 * –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç ùëõ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª 0 ‚â§ ùë§1,‚Ä¶,ùë§ùëõ ‚â§ 100000,
 * –∑–∞–¥–∞—é—â–∏—Ö –≤–µ—Å–∞ —Å–ª–∏—Ç–∫–æ–≤.
 * –ù–∞–π–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –∑–æ–ª–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —É–Ω–µ—Å—Ç–∏ –≤ —Ä—é–∫–∑–∞–∫–µ.
 */

package Tasks;

import java.util.Scanner;

public class KnapsackMaxWeight {
    public static void main(String[] args) {
        new KnapsackMaxWeight().run();
    }

    public void run() {
        Scanner sc = new Scanner(System.in);
        int W = sc.nextInt(); // –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ä—é–∫–∑–∞–∫–∞
        int n = sc.nextInt(); // —á–∏—Å–ª–æ –∑–æ–ª–æ—Ç—ã—Ö —Å–ª–∏—Ç–∫–æ–≤
        int[] weight = new int[n];
        int [][] D = new int[W+1][n+1];
        for(int i = 0 ; i < n ;i++){
            weight[i] = sc.nextInt();
        }
        for (int i = 0 ; i <= W ; i++){
            D[i][0] = 0;
        }
        for (int i = 0 ; i <= n ; i++){
            D[0][i] = 0;
        }


        for (int i = 1 ; i <= n ; ++i){
            for (int j = 0 ; j <= W ; ++j){
                D[j][i] = D[j][i-1];
                if(weight[i-1] <= j ){
                    D[j][i] = Math.max(D[j][i],D[j-weight[i-1]][i - 1]+weight[i-1]);
                }
            }
        }
        System.out.println(D[W][n]);
    }
}

